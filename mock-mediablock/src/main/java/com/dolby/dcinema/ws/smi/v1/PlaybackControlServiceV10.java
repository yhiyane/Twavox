package com.dolby.dcinema.ws.smi.v1;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.annotation.XmlSeeAlso;

/**
 * This class was generated by Apache CXF 3.1.1
 * 2015-07-09T17:38:11.708+02:00
 * Generated source version: 3.1.1
 * 
 */
@WebService(targetNamespace = "http://www.dolby.com/dcinema/ws/smi/v1", name = "PlaybackControlService_v1_0")
@XmlSeeAlso({com.dolby.dcinema.ws.smi.v1_4.ObjectFactory.class, com.dolby.dcinema.ws.smi.v1_3.ObjectFactory.class, com.dolby.dcinema.ws.smi.v1.schemas.common.ObjectFactory.class, com.dolby.dcinema.ws.smi.v1_2.ObjectFactory.class, com.dolby.dcinema.ws.smi.v1_1.ObjectFactory.class, com.dolby.dcinema.ws.smi.v1_0.ObjectFactory.class, com.dolby.dcinema.ws.smi.v1.schemas.fault.ObjectFactory.class, com.dolby.dcinema.ws.smi.v1.schemas.playbackcontrol.ObjectFactory.class})
@SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
public interface PlaybackControlServiceV10 {

    /**
     * play Operation
     *     Plays the currently selected content at the current playback position.  Does nothing
     *     if content is already playing.
     * 
     * 		  Parameters:
     * 		      None
     * 
     * 		  Response:
     *     None
     * 
     * 		  Exceptions:
     * 		      ContentFailure - If there is no content that is selected.
     * 		      InvalidTransportStateFailure - If the TransportState is UNAVAILABLE.
     * 		      NotConnected - If the ContentPlayer component is not connected.
     * 
     * 		  Related Services:
     * 		      getPlaybackState - Successfully initiating play indicates that the request succeeded.
     * 		         The service getPlaybackState should be used to ensure that playback is occurring.
     *       
     */
    @WebResult(name = "playResponse", targetNamespace = "http://www.dolby.com/dcinema/ws/smi/v1_0", partName = "result")
    @WebMethod(action = "http://www.dolby.com/dcinema/ws/smi/v1/play")
    public com.dolby.dcinema.ws.smi.v1_0.PlayResponse play(
        @WebParam(partName = "parameters", name = "playRequest", targetNamespace = "http://www.dolby.com/dcinema/ws/smi/v1_0")
        com.dolby.dcinema.ws.smi.v1_0.PlayRequest parameters
    ) throws Fault;

    /**
     * goToPosition Operation
     *     Goes to the specified position within the selected content.  This operation will
     *     cause the transport state to change but the ending transport state will be the
     *     same as when the operation was performed.  Does nothing if the position is
     *     outside of the boundary of the selected content.
     * 
     * 		  Parameters:
     * 		      position - The position within the selected content to move the playback position to.
     * 
     * 		  Response:
     *     None
     * 
     * 		  Exceptions:
     * 		      ContentFailure - If there is no content that is selected.
     * 		      InvalidTransportStateFailure - If the TransportState is UNAVAILABLE.
     * 		      NotConnected - If the ContentPlayer component is not connected.
     * 
     * 		  Related Services:
     * 		      getPlaybackState - Successfully initiating goToPosition indicates that the request succeeded.
     * 		         The service getPlaybackState should be used to ensure the desired position.
     *       
     */
    @WebResult(name = "goToPositionResponse", targetNamespace = "http://www.dolby.com/dcinema/ws/smi/v1_0", partName = "result")
    @WebMethod(action = "http://www.dolby.com/dcinema/ws/smi/v1/goToPosition")
    public com.dolby.dcinema.ws.smi.v1_0.GoToPositionResponse goToPosition(
        @WebParam(partName = "parameters", name = "goToPositionRequest", targetNamespace = "http://www.dolby.com/dcinema/ws/smi/v1_0")
        com.dolby.dcinema.ws.smi.v1_0.GoToPositionRequest parameters
    ) throws Fault;

    /**
     * getScheduleMode Operation
     *     Indicates whether the system should automatically be played from the schedule or if
     *     playback should be controlled explicitly via playback commands.
     * 
     * 		  Parameters:
     * 		      None
     * 
     * 		  Response:
     *     scheduleMode - Indicates if and how the system should utilize the schedule for
     *         playback purposes.
     * 
     * 		  Exceptions:
     * 		      NotConnected - If the ContentPlayer component is not connected.
     * 
     * 		  Related Services:
     *       
     */
    @WebResult(name = "getScheduleModeResponse", targetNamespace = "http://www.dolby.com/dcinema/ws/smi/v1_0", partName = "result")
    @WebMethod(action = "http://www.dolby.com/dcinema/ws/smi/v1/getScheduleMode")
    public com.dolby.dcinema.ws.smi.v1_0.GetScheduleModeResponse getScheduleMode(
        @WebParam(partName = "parameters", name = "getScheduleModeRequest", targetNamespace = "http://www.dolby.com/dcinema/ws/smi/v1_0")
        com.dolby.dcinema.ws.smi.v1_0.GetScheduleModeRequest parameters
    ) throws Fault;

    /**
     * stops Operation
     *     Stops the currently playing content at the current playback position and displays black
     *     on screen.  Does nothing if content is already stopped.
     * 
     * 		  Parameters:
     * 		      None
     * 
     * 		  Response:
     *     None
     * 
     * 		  Exceptions:
     * 		      InvalidTransportStateFailure - If the TransportState is not in the READY, PLAYING, PAUSED or STOPPED state.
     * 		      NotConnected - If the ContentPlayer component is not connected.
     * 
     * 		  Related Services:
     * 		      getPlaybackState - Successfully initiating stop indicates that the request succeeded.
     * 		         The service getPlaybackState should be used to ensure the desired transport state.
     *       
     */
    @WebResult(name = "stopResponse", targetNamespace = "http://www.dolby.com/dcinema/ws/smi/v1_0", partName = "result")
    @WebMethod(action = "http://www.dolby.com/dcinema/ws/smi/v1/stop")
    public com.dolby.dcinema.ws.smi.v1_0.StopResponse stop(
        @WebParam(partName = "parameters", name = "stopRequest", targetNamespace = "http://www.dolby.com/dcinema/ws/smi/v1_0")
        com.dolby.dcinema.ws.smi.v1_0.StopRequest parameters
    ) throws Fault;

    /**
     * getPlaybackState Operation
     *     Gets the current playback state.
     * 
     * 		  Parameters:
     * 		      None
     * 
     * 		  Response:
     * 		      transportState - Indicates the current state of the transport.
     * 		      contentPlaybackState (optional) - Indicates the state of the currently selected
     * 		          content.  Will only be present if content is selected.
     * 			  scheduleMode - Indicates whether content will automatically play off of the schedule.
     * 			  playbackMode - Indicates what mode the player will play in (2D, 3D, Dolby 3D).
     * 
     * 		  Exceptions:
     * 		      NotConnected - If the ContentPlayer component is not connected.
     * 
     * 		  Related Services:
     * 		      None
     *       
     */
    @WebResult(name = "getPlaybackStateResponse", targetNamespace = "http://www.dolby.com/dcinema/ws/smi/v1_0", partName = "result")
    @WebMethod(action = "http://www.dolby.com/dcinema/ws/smi/v1/getPlaybackState")
    public com.dolby.dcinema.ws.smi.v1_0.GetPlaybackStateResponse getPlaybackState(
        @WebParam(partName = "parameters", name = "getPlaybackStateRequest", targetNamespace = "http://www.dolby.com/dcinema/ws/smi/v1_0")
        com.dolby.dcinema.ws.smi.v1_0.GetPlaybackStateRequest parameters
    ) throws Fault;

    /**
     * setScheduleMode Operation
     *     Sets whether the system should automatically be played from the schedule or if
     *     playback should be controlled explicitly via playback commands.
     * 
     * 		  Parameters:
     *     scheduleMode - Indicates if and how the system should utilize the schedule for
     *         playback purposes.
     * 
     * 		  Response:
     *     None
     * 
     * 		  Exceptions:
     * 		      NotConnected - If the ContentPlayer component is not connected.
     * 
     * 		  Related Services:
     * 		      getScheduleMode - Successfully initiating setScheduleMode indicates that the request succeeded.
     * 		         The service getScheduleMode should be used to ensure the desired schedule mode.
     *       
     */
    @WebResult(name = "setScheduleModeResponse", targetNamespace = "http://www.dolby.com/dcinema/ws/smi/v1_0", partName = "result")
    @WebMethod(action = "http://www.dolby.com/dcinema/ws/smi/v1/setScheduleMode")
    public com.dolby.dcinema.ws.smi.v1_0.SetScheduleModeResponse setScheduleMode(
        @WebParam(partName = "parameters", name = "setScheduleModeRequest", targetNamespace = "http://www.dolby.com/dcinema/ws/smi/v1_0")
        com.dolby.dcinema.ws.smi.v1_0.SetScheduleModeRequest parameters
    ) throws Fault;

    /**
     * next Operation
     *     Advances the playback position to the beginning of the next reel.  This operation will do
     *     nothing if you are already on the last reel.
     * 
     * 		  Parameters:
     * 		      None
     * 
     * 		  Response:
     *     None
     * 
     * 		  Exceptions:
     * 		      InvalidTransportStateFailure - If the TransportState is not in the READY, PLAYING, STOPPED or PAUSED state.
     * 		      NotConnected - If the ContentPlayer component is not connected.
     * 
     * 		  Related Services:
     * 		      getPlaybackState - Successfully initiating next indicates that the request succeeded.
     * 		         The service getPlaybackState should be used to ensure the desired transport position.
     *       
     */
    @WebResult(name = "nextResponse", targetNamespace = "http://www.dolby.com/dcinema/ws/smi/v1_0", partName = "result")
    @WebMethod(action = "http://www.dolby.com/dcinema/ws/smi/v1/next")
    public com.dolby.dcinema.ws.smi.v1_0.NextResponse next(
        @WebParam(partName = "parameters", name = "nextRequest", targetNamespace = "http://www.dolby.com/dcinema/ws/smi/v1_0")
        com.dolby.dcinema.ws.smi.v1_0.NextRequest parameters
    ) throws Fault;

    /**
     * setPlaybackMode Operation
     *     Sets the playback mode (2D, 3D, Dolby 3D) of the player.
     * 
     * 		  Parameters:
     * 		      playbackMode - The new playback mode of the player.
     * 
     * 		  Response:
     *     None
     * 
     * 		  Exceptions:
     * 		      NotConnected - If the Decoder component is not connected.
     * 		      OperationFailed - if the playback mode cannot be changed because autoPlaybackMode is not set to MANUAL.
     * 
     * 		  Related Services:
     * 		      getPlaybackState - Successfully initiating setPlaybackMode indicates that the request succeeded.
     * 		         The service getPlaybackState should be used to ensure the desired playback mode.
     *       
     */
    @WebResult(name = "setPlaybackModeResponse", targetNamespace = "http://www.dolby.com/dcinema/ws/smi/v1_0", partName = "result")
    @WebMethod(action = "http://www.dolby.com/dcinema/ws/smi/v1/setPlaybackMode")
    public com.dolby.dcinema.ws.smi.v1_0.SetPlaybackModeResponse setPlaybackMode(
        @WebParam(partName = "parameters", name = "setPlaybackModeRequest", targetNamespace = "http://www.dolby.com/dcinema/ws/smi/v1_0")
        com.dolby.dcinema.ws.smi.v1_0.SetPlaybackModeRequest parameters
    ) throws Fault;

    /**
     * previous Operation
     *     Moves the playback position to the beginning of the current reel or to the beginning of the
     *     previous reel if the playback position is within 3 seconds from the beginning of the current reel.
     *     This operation will do nothing if you are already at the beginning of the first reel.
     * 
     * 		  Parameters:
     * 		      None
     * 
     * 		  Response:
     *     None
     * 
     * 		  Exceptions:
     * 		      InvalidTransportStateFailure - If the TransportState is not in the READY, PLAYING, STOPPED or PAUSED state.
     * 		      NotConnected - If the ContentPlayer component is not connected.
     * 
     * 		  Related Services:
     * 		      getPlaybackState - Successfully initiating previous indicates that the request succeeded.
     * 		         The service getPlaybackState should be used to ensure the desired transport position.
     *       
     */
    @WebResult(name = "previousResponse", targetNamespace = "http://www.dolby.com/dcinema/ws/smi/v1_0", partName = "result")
    @WebMethod(action = "http://www.dolby.com/dcinema/ws/smi/v1/previous")
    public com.dolby.dcinema.ws.smi.v1_0.PreviousResponse previous(
        @WebParam(partName = "parameters", name = "previousRequest", targetNamespace = "http://www.dolby.com/dcinema/ws/smi/v1_0")
        com.dolby.dcinema.ws.smi.v1_0.PreviousRequest parameters
    ) throws Fault;

    /**
     * selectContent Operation
     *     Selects the content (eg, clip or show) for future playback.
     * 
     * 		  Parameters:
     * 		      contentId - The unique identifer of the content to be selected.  If null or an empty string
     * 		          is specified the selected content will be unselected.
     * 			  playableContentType (optional) - The type of the content (eg, clip or show) to be played.  If
     * 			      not specified, the first playable content with the matching uuid will be selected.
     * 			      Search order is show then clip.
     * 
     * 		  Response:
     *     None
     * 
     * 		  Exceptions:
     * 		  	  InvalidTransportStateFailure - If the TransportState is PLAYING while a new selection is being made.
     * 		      NotFound - If no playable content with the matching uuid could be found for the
     * 		          specified content type.
     * 		      NotConnected - If the ContentPlayer component is not connected.
     * 
     * 		  Related Services:
     * 		      getPlaybackState - Successfully initiating selectContent indicates that the request succeeded.
     * 		         The service getPlaybackState should be used to ensure that the playable content has been selected.
     *       
     */
    @WebResult(name = "selectContentResponse", targetNamespace = "http://www.dolby.com/dcinema/ws/smi/v1_0", partName = "result")
    @WebMethod(action = "http://www.dolby.com/dcinema/ws/smi/v1/selectContent")
    public com.dolby.dcinema.ws.smi.v1_0.SelectContentResponse selectContent(
        @WebParam(partName = "parameters", name = "selectContentRequest", targetNamespace = "http://www.dolby.com/dcinema/ws/smi/v1_0")
        com.dolby.dcinema.ws.smi.v1_0.SelectContentRequest parameters
    ) throws Fault;

    /**
     * pause Operation
     *     Pauses the currently selected content at the current playback position and freezes the
     *     current image on screen.  Does nothing if the content is already stopped or paused.
     * 
     * 		  Parameters:
     * 		      None
     * 
     * 		  Response:
     *     None
     * 
     * 		  Exceptions:
     * 		      InvalidTransportStateFailure - If the TransportState is not in the READY, PLAYING, STOPPED, or PAUSED state.
     * 		      NotConnected - If the ContentPlayer component is not connected.
     * 
     * 		  Related Services:
     * 		      getPlaybackState - Successfully initiating pause indicates that the request succeeded.
     * 		         The service getPlaybackState should be used to ensure the desired transport state.
     *       
     */
    @WebResult(name = "pauseResponse", targetNamespace = "http://www.dolby.com/dcinema/ws/smi/v1_0", partName = "result")
    @WebMethod(action = "http://www.dolby.com/dcinema/ws/smi/v1/pause")
    public com.dolby.dcinema.ws.smi.v1_0.PauseResponse pause(
        @WebParam(partName = "parameters", name = "pauseRequest", targetNamespace = "http://www.dolby.com/dcinema/ws/smi/v1_0")
        com.dolby.dcinema.ws.smi.v1_0.PauseRequest parameters
    ) throws Fault;
}
